// 프로젝트에 적용할 플러그인들을 정의
plugins {
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}
// 프로젝트의 그룹 ID와 버전을 정의
group = 'com.demo'
// SNAPSHOT'은 개발 중이라는 의미로, 개발자들이 테스트하거나 개발을 위해 사용할 수 있는 상태
version = '0.0.1-SNAPSHOT'
//프로젝트에서 사용할 Java 버전
sourceCompatibility = '11'

// 프로젝트의 의존성 설정을 정의
configurations {
	//컴파일만 필요한 의존성이 annotationProcessor 로 확장
	compileOnly {
		extendsFrom annotationProcessor
	}
}
// 의존성을 다운로드 받을 저장소를 명시
repositories {
	mavenCentral()
}

dependencies {
	//웹 애플리케이션 개발에 필요한 대부분의 의존성
	implementation 'org.springframework.boot:spring-boot-starter-web'
	//JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//Java Bean Validation 과 Hibernate Validator 를 포함
	//Java Bean Validation: 데이터의 유효성 검사를 위한 표준 스펙.
	//데이터의 유효성 검사 규칙을 Annotation 을 통해 쉽게 정의할 수 있음.
	//Hibernate Validator: Java Bean Validation 스펙의 구현체 중 하나로,
	//Bean 객체의 유효성을 검사하는 데 사용
	implementation("org.springframework.boot:spring-boot-starter-validation")
	//Automatic Restart: 클래스패스에 있는 파일이 변경될 때마다 자동으로 애플리케이션을 재시작
	//LiveReload: 브라우저에 LiveReload 플러그인이 설치되어 있으면, 애플리케이션을 재시작할 때마다 자동으로 웹 페이지를 새로고침
	//Fast Failure: 빠른 실패 기능을 통해 특정 클래스가 여러 위치에서 발견될 경우 즉시 애플리케이션을 종료
	//Global Settings: Spring Boot 의 전역 설정을 정의할 수 있음
	//Remote Debugging: 원격 디버깅을 쉽게
	//Additional Development-time Features: H2 콘솔을 자동으로 활성화하는 등의 추가 개발 시간 기능을 제공
	implementation 'org.springframework.boot:spring-boot-devtools'
	// 애노테이션을 사용하여 자동으로 생성
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	//Lombok 의 애노테이션 처리기를 활성화하기 위함
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//Spring Security 적용
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test'
	//JWT
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
	implementation 'com.google.code.gson:gson:2.9.0'
	//OAuth2
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

}

//  테스트 작업에 JUnit Platform 을 사용하도록 설정
tasks.named('test') {
	useJUnitPlatform()
}